Amíg át nem írom interfacesre:
ha nem vagy biztos benne, hogy hogyan kapja meg a dolgokat, vagy ő hogyan fog bármit átadani, de van elképzelésed a logikájáról, akkor írj csak egy void függvényt, esetleg az elejére vegyél fel belső változókat, hogy kb mikre számítanál, hogy jöjjön és kezd el megírni a logikát, aztán ha majd megvan az áttérés akkor kikalapáljuk

áttérés az interfaces megoldásra:
* msg osztályok törlése, nem lesz rá szükség, ahogy konzin magyarázta
* meg minden más

bele lehet kezdeni:
* start/connect ablak ip címmel - PIPA (Laci, bár nem szép)

* hajó lerakó meg kilövő UI elem

* ABCD - Laci - PIPA (Áron által)
* miből mennyit lehet még lerakni képernyő - Laci
* háború állapotban az ellenféltől kilövendő hajók száma - Laci

* hajó lerakás vizsgálata - Áron
* állapot váltása ready-re - Áron
* több állapot felvétele - Áron


* hajó osztály tárolja el a hozzá tartozó mezőket (gombokat)

* gamestate osztályban tárolni minden lófaszt, mint ahogy a konzin mondta, ez kerül majd küldözgetésre
* control osztályt is lehet csinálni ahogy a konzin mondta
* ellenőrizni, hogy tényleg meghalt-e egy teljes hajó
* ha minden hajó meghalt, akkor jelezni
* állapotgép ami a megkapott gamestate alapján eldönti, hogy lepakolás fázis van-e, illetve amikor megy a játék rakhat-e az adott játékos


az interfaces megoldásra áttérés után inkább:
* ellenőrizni, hogy ténylegesen hova lőttünk - msg osztály törlődni fog, gamestate oszály lesz
